// https://doc.rust-lang.org/book/ch08-02-strings.html

pub fn run() {
    // Strings
    println!("\nStrings:");

    // Rust has only one string type in the core language, which is the string slice str that is usually seen in its borrowed form &str.
    // String literals, for example, are stored in the program’s binary and are therefore string slices.
    let string_literal: &str = "A string literal is a slice";

    // Creating Strings
    // ----------------
    // String type in the standard library is different from the string slice provided in the core language.
    // String is growable and mutable.
    // String and string slices are UTF-8 encoded.
    // String is actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions, and capabilities.
    let mut s = String::new();

    // Often, we’ll have some initial data that we want to start the string with.
    // For that, we use the to_string method, which is available on any type that implements the Display trait, as string literals do.
    let data = "initial contents";
    let s = data.to_string();
    // the method also works on a literal directly:
    let s = "initial contents".to_string();

    // We can also use the function String::from to create a String from a string literal.
    let s = String::from("initial contents");

    // UTF-8
    let hello = String::from("السلام عليكم");
    let hello = String::from("Dobrý den");
    let hello = String::from("Hello");
    let hello = String::from("שָׁלוֹם");
    let hello = String::from("नमस्ते");
    let hello = String::from("こんにちは");
    let hello = String::from("안녕하세요");
    let hello = String::from("你好");
    let hello = String::from("Olá");
    let hello = String::from("Здравствуйте");
    let hello = String::from("Hola");

    // Updating strings
    // -----------------
    // Appending to a String with push_str and push
    // push_str takes string slice because we don't want to take ownership
    // If the push_str method took ownership of s2, we wouldn’t be able to print its value on the last line.
    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1.push_str(s2);
    println!("s2 is {}", s2);

    // push method takes a single character as a parameter and adds it to the String. Listing 8-17 adds the letter “l” to a String using the push method.
    let mut s = String::from("lo");
    s.push('l');

    // Concatenation with the + Operator or the format! Macro

    // The + Operator
    // ---------------
    // The + operator uses the add method, whose signature looks something like this: fn add(self, s: &str) -> String {
    // we can only add a &str to a String; we can’t add two String values together.
    // the compiler can coerce the &String argument into a &str
    // Rust uses a deref coercion, which here turns &s2 into &s2[..]
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    // So although let s3 = s1 + &s2; looks like it will copy both strings and create a new one,
    // this statement actually takes ownership of s1, appends a copy of the contents of s2,
    // and then returns ownership of the result. In other words, it looks like it’s making a lot of copies
    // but isn’t; the implementation is more efficient than copying.
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used

    // If we need to concatenate multiple strings, the behavior of the + operator gets unwieldy:
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = s1 + "-" + &s2 + "-" + &s3;

    // The format! Macro
    // -----------------
    // he format! macro works like println!, but instead of printing the output to the screen, it returns a String with the contents.
    // The version of the code using format! is much easier to read, and the code generated by the format! macro uses references
    // so that this call doesn’t take ownership of any of its parameters.
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");
    let s = format!("{}-{}-{}", s1, s2, s3);

    // Indexing into Strings
    // ---------------------
    // In many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation.
    // However, if you try to access parts of a String using indexing syntax in Rust, you’ll get an error.
    // Each of these letters takes 1 byte when encoded in UTF-8.
    let s1 = String::from("hello");
    // let h = s1[0]; // error[E0277]: the type `String` cannot be indexed by `{integer}`

    // Here each Unicode scalar value in that string takes 2 bytes of storage.
    let hello = String::from("Здравствуйте");

    // The answer, then, is that to avoid returning an unexpected value and causing bugs that might not be discovered immediately,
    // Rust doesn’t compile this code at all and prevents misunderstandings early in the development process.
    // A final reason Rust doesn’t allow us to index into a String to get a character is that indexing operations are expected to always take constant time (O(1)).
    // But it isn’t possible to guarantee that performance with a String, because Rust would have to walk through the contents from the beginning
    // to the index to determine how many valid characters there were.

    // Slicing Strings
    // ---------------
    // Instead of using a numeric value to index, Rust allows a range
    // You should use ranges to create string slices with caution, because doing so can crash your program.
    let hello = "Здравствуйте";
    let s = &hello[0..4];

    // chars() and bytes methods
    // -------------------------
    // Methods for Iterating Over Strings
    // The best way to operate on pieces of strings is to be explicit about whether you want characters or bytes.
    // For individual Unicode scalar values, use the chars method.
    for c in "Зд".chars() {
        println!("{}", c);
    }

    // Alternatively, the bytes method returns each raw byte, which might be appropriate for your domain:
    for b in "Зд".bytes() {
        println!("{}", b);
    }


}
